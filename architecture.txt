# EloWard Cloudflare Infrastructure

## üóëÔ∏è Routes Safe for Removal
**The following routes are no longer used by the migrated EloWardApp extension:**
- `GET /auth/init` - Replaced by client-side URL building
- `POST /auth/token` - Replaced by `/auth/complete`
- `GET /riot/account/{region}` - Replaced by server-side calls
- `GET /riot/league/entries` - Replaced by server-side calls
- `GET /riot/league/{platform}/{puuid}` - Replaced by server-side calls  
- `POST /store-rank` - Replaced by `/auth/complete`

Additional Twitch routes safe for removal (kept temporarily for legacy clients):
- `POST /auth/twitch/init` - Client-side URL building is used
- `POST /auth/twitch/token` - Superseded by consolidated `/twitch/auth`
- `POST /auth/twitch/token/refresh` - Superseded by consolidated `/twitch/auth`
- `POST /auth/twitch/validate` - Superseded by consolidated `/twitch/auth`
- `POST /auth/twitch/user` - Superseded by consolidated `/twitch/auth`
- `POST /store-user` - Superseded by consolidated `/twitch/auth`

EloWard Bot (control plane) routes safe for removal:
- `GET /bot/config/{login}` - Removed; use `POST /bot/config_id` instead

**Migration Status:** ‚úÖ Complete - Extension fully migrated to server-side auth flow

**Note:** `GET /auth/redirect` must be kept as it's required for OAuth callbacks from Riot Games.

## D1 Database Configuration
- Database Name: eloward
- Database ID: ef228f37-9c28-43f2-a211-cfddd4188c78

## Tables

### users
- Purpose: Stores complete Twitch user profile data and app-specific metrics
- Primary Key: `twitch_id` (TEXT)
- Columns:
  - `twitch_id` (TEXT): Twitch user ID (PRIMARY KEY)
  - `channel_name` (TEXT): Twitch login/username (stored in lowercase)
  - `display_name` (TEXT): Twitch display name (nullable)
  - `type` (TEXT): User type (e.g., "", "admin", "global_mod", "staff") (nullable)
  - `broadcaster_type` (TEXT): Broadcaster type (e.g., "", "affiliate", "partner") (nullable)
  - `description` (TEXT): User bio/description (nullable)
  - `profile_image_url` (TEXT): Profile image URL (nullable)
  - `offline_image_url` (TEXT): Offline banner image URL (nullable)
  - `view_count` (INTEGER): Total channel view count (default: 0)
  - `email` (TEXT): Twitch email (nullable)
  - `twitch_created_at` (TEXT): When Twitch account was created (ISO string) (nullable)
  - `db_reads` (INTEGER): Counter for all database reads requested for this channel (default: 0)
  - `successful_lookups` (INTEGER): Counter for successful lookups (viewer found in database) (default: 0)
  - `channel_active` (BOOLEAN): Whether EloWard is active for this channel (default: 1)
  - `created_at` (TIMESTAMP): When the user joined EloWard (default: CURRENT_TIMESTAMP)
  - `updated_at` (TIMESTAMP): When the record was last updated (default: CURRENT_TIMESTAMP)

### subscriptions
- Purpose: Stores payment and subscription metadata, separate from user profiles
- Primary Key: `twitch_id` (TEXT)
- Columns:
  - `twitch_id` (TEXT): Reference to users.twitch_id (PRIMARY KEY)
  - `stripe_customer_id` (TEXT): Stripe customer ID (unique, nullable)
  - `stripe_subscription_id` (TEXT): Stripe subscription ID (unique, nullable)
  - `subscription_end_date` (TIMESTAMP): When subscription expires (nullable)
  - `plus_active` (BOOLEAN): Whether EloWard+ features are active (default: 0)
  - `created_at` (TIMESTAMP): When the subscription was created (default: CURRENT_TIMESTAMP)
  - `updated_at` (TIMESTAMP): When the record was last updated (default: CURRENT_TIMESTAMP)
  - **Foreign Key**: `twitch_id` REFERENCES `users(twitch_id)` ON DELETE CASCADE

### lol_ranks
- Purpose: Stores League of Legends rank data for Twitch viewers
- Primary Key: `riot_puuid` (TEXT)
- Columns:
  - `riot_puuid` (TEXT): Riot player universal unique identifier (PRIMARY KEY)
  - `twitch_username` (TEXT): Twitch username (NOT NULL)
  - `riot_id` (TEXT): Riot ID (gameName#tagLine) (nullable)
  - `rank_tier` (TEXT): Rank tier (e.g., IRON, BRONZE, SILVER) (NOT NULL)
  - `rank_division` (TEXT): Rank division (e.g., I, II, III, IV) (nullable)
  - `lp` (INTEGER): League points (default: 0)
  - `region` (TEXT): Riot API region (e.g., na1, euw1, kr) (nullable)
  - `last_updated` (INTEGER): Unix timestamp of last update (NOT NULL)

## Worker Architecture

### Service Bindings Structure
```
Extension/Web App
    ‚Üì
Auth Workers (Token Validation + API Calls)
    ‚Üì
Database Workers (Database Operations)
    ‚Üì
D1 Database
```

### Workers and Endpoints

#### Authentication Workers (token validation and external API calls)

**Riot Auth Worker** (`riotauth-worker.ts`)
- URL: https://eloward-riotauth.unleashai.workers.dev
- Service Bindings: `RANK_WORKER`, `TWITCH_AUTH_WORKER`, `USERS_WORKER`
- Endpoints:
  - `POST /auth/complete` ‚Äî Status: Active. Completes OAuth and stores rank (server-side only).
  - `POST /riot/refreshrank` ‚Äî Status: Active. Refreshes rank by PUUID (server-side only; no PUUID returned).
  - `DELETE /disconnect` ‚Äî Status: Active. Deletes rank by PUUID (server-side only).
  - `GET /auth/redirect` ‚Äî Status: Active. OAuth redirect handler.
  - `GET /auth/init` ‚Äî Status: Legacy (safe to remove). Replaced by client-side URL building.
  - `POST /auth/token` ‚Äî Status: Legacy (safe to remove). Superseded by `/auth/complete`.
  - `GET /riot/account/{region}` ‚Äî Status: Legacy (safe to remove). Superseded by server-side logic.
  - `GET /riot/league/entries` ‚Äî Status: Legacy (safe to remove). Superseded by server-side logic.
  - `GET /riot/league/{platform}/{puuid}` ‚Äî Status: Legacy (safe to remove). Superseded by server-side logic.
  - `POST /store-rank` ‚Äî Status: Legacy (safe to remove). Superseded by `/auth/complete`.

**Twitch Auth Worker** (`twitchauth-worker.ts`)
- URL: https://eloward-twitchauth.unleashai.workers.dev
- Service Bindings: `USERS_WORKER`
- Endpoints:
  - `GET /health` ‚Äî Status: Active.
  - `POST /twitch/auth` ‚Äî Status: Active. Consolidated (code ‚Üí user ‚Üí register). No tokens returned to clients.
  - `GET /auth/twitch/redirect` ‚Äî Status: Active. OAuth redirect handler.
  - `POST /auth/twitch/init` ‚Äî Status: Legacy (keep for compatibility).
  - `POST /auth/twitch/token` ‚Äî Status: Legacy (keep for compatibility).
  - `POST /auth/twitch/token/refresh` ‚Äî Status: Legacy (keep for compatibility).
  - `POST /auth/twitch/validate` ‚Äî Status: Legacy (keep for compatibility).
  - `POST /auth/twitch/user` ‚Äî Status: Legacy (keep for compatibility).
  - `POST /store-user` ‚Äî Status: Legacy (safe to remove).

#### Database Workers (Handle database operations only)

**Rank Worker** (`rank-worker.js`)
- URL: https://eloward-ranks.unleashai.workers.dev
- Database Access: Direct D1 binding
- Endpoints:
  - `GET /api/ranks/lol/{username}` ‚Äî Status: Active (public read). Returns sanitized fields; no PUUID.
  - `POST /api/ranks/lol` ‚Äî Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /api/ranks/lol/by-puuid` ‚Äî Status: Active (read). Returns sanitized fields; no PUUID. Consider restricting to internal use.
  - `DELETE /api/ranks/lol` ‚Äî Status: Active (internal delete). Requires `X-Internal-Auth`.

**Users Worker** (`users-worker.js`)
- URL: https://eloward-users.unleashai.workers.dev
- Database Access: Direct D1 binding
- Endpoints:
  - `GET /health` ‚Äî Status: Active.
  - `POST /channelstatus/verify` ‚Äî Status: Active (public read). Returns `{ active }` only.
  - `POST /metrics/db_read` ‚Äî Status: Active (public write).
  - `POST /metrics/successful_lookup` ‚Äî Status: Active (public write).
  - `POST /user/register` ‚Äî Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /user/lookup` ‚Äî Status: Active (internal read). Requires `X-Internal-Auth`.
  - `POST /dashboard/data` ‚Äî Status: Legacy (public read). Login-based; sanitized fields only.
  - `POST /dashboard/data_id` ‚Äî Status: Active (public read). ID-based; sanitized fields only.
  - `POST /channel/active/update` ‚Äî Status: Legacy (internal write). Login-based; requires `X-Internal-Auth`.
  - `POST /channel/active/update_id` ‚Äî Status: Active (internal write). ID-based; requires `X-Internal-Auth`.

#### Utility Workers

**CDN Worker** (`cdn.js`)
- URL: https://eloward-cdn.unleashai.workers.dev
- Purpose: Serves rank badge images from R2 storage
- Endpoints:
  - `GET /{game}/{filename}` ‚Äî Status: Active (public read). Static assets with long-lived caching.

**Stripe Worker** (`stripe-worker.js`)
- URL: https://eloward-stripe.unleashai.workers.dev
- Purpose: Handles Stripe payments and webhooks
- Endpoints:
  - `POST /api/create-checkout-session` ‚Äî Status: Active (public write).
  - `POST /api/create-portal-session` ‚Äî Status: Active (public write).
  - `POST /api/webhook` ‚Äî Status: Active (webhook; raw body verification).

#### EloWard Bot Worker (`elowardbot/bot-worker.ts`)
- URL: https://eloward-bot.unleashai.workers.dev
- Purpose: Moderation bot control plane: OAuth, IRC ingestion, cooldowns (no EventSub/Helix in default mode)
- Durable Objects: `BotManager` (orchestrates), `IrcShard` (cooldown), `IrcClientShard` (IRC WebSocket)
- KV: `BOT_KV` for EloWardBot tokens
- Endpoints:
  - `GET /health` ‚Äî Status: Active.
  - `POST /bot/config_id` ‚Äî Status: Active (public read). Returns sanitized config; omits `twitch_id`.
  - `POST /bot/enable_internal` ‚Äî Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /bot/disable_internal` ‚Äî Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /bot/config_internal` ‚Äî Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /irc/start` / `POST /irc/reload` ‚Äî Status: Active (internal). Starts/refreshes IRC client shards.
  - `GET /bot/config/{login}` ‚Äî Status: Deprecated (removed). Use `/bot/config_id`.

## Data Flow

### Optimized Single-Call Riot Auth Flow (**ENHANCED** - 1 backend call)
1. Extension ‚Üí Riot OAuth (with enhanced state containing twitch_id + region)
2. Riot ‚Üí riotauth-worker `/auth/redirect` (with code + enhanced state)
3. riotauth-worker ‚Üí Complete auth processing (server-side):
   - Exchanges code for tokens
   - Gets PUUID from Riot Account API  
   - Looks up channel_name from users-worker
   - Fetches rank data from Riot League API
   - Stores rank data via rank-worker
4. riotauth-worker ‚Üí Website redirect (with auth_complete=true)
5. Website ‚Üí Extension (via postMessage with success notification)

### Legacy Dual-Call Flow (Fallback when optimization fails)
1. Extension ‚Üí riotauth-worker `/auth/complete` (sends code + twitch_id + region)
2. riotauth-worker ‚Üí Riot OAuth API (exchanges code for tokens server-side)
3. riotauth-worker ‚Üí Riot Account API (gets PUUID using token)
4. riotauth-worker ‚Üí users-worker `/user/lookup` (gets channel_name from twitch_id)
5. riotauth-worker ‚Üí Riot League API (fetches initial rank data)
6. riotauth-worker ‚Üí rank-worker `/api/ranks/lol` (stores rank data)
7. riotauth-worker ‚Üí Extension (returns complete user data, no tokens)

### Legacy Initial Rank Setup Flow (**üóëÔ∏è CAN REMOVE** - no longer used)
**Uses deprecated endpoints: `/auth/init`, `/auth/token`, `/store-rank`**
**Extension has been migrated to use `/auth/complete` flow**
1. Extension ‚Üí riotauth-worker (validates Riot & Twitch tokens)
2. riotauth-worker ‚Üí twitchauth-worker (validates Twitch user)
3. riotauth-worker ‚Üí rank-worker (stores rank data)
4. rank-worker ‚Üí D1 Database

### Simplified Rank Refresh Flow
1. Extension ‚Üí riotauth-worker `/riot/refreshrank` (sends only PUUID)
2. riotauth-worker ‚Üí rank-worker `/api/ranks/lol/by-puuid` (looks up user data)
3. riotauth-worker ‚Üí Riot API (fetches current rank using server API key)
4. riotauth-worker ‚Üí rank-worker `/api/ranks/lol` (updates rank data)
5. rank-worker ‚Üí D1 Database

### EloWard Bot Moderation Flow (IRC-only)
1. Website dashboard ‚Üí Bot worker OAuth (`/oauth/start?actor=bot`) to connect EloWardBot; tokens stored in KV
2. Streamer connects (`/oauth/start?actor=broadcaster`) ‚Üí auto-enable bot
3. Dashboard internal toggle ‚Üí `/irc/start` warms cooldowns and assigns channels to IRC client shards
4. IrcClientShard connects to `wss://irc-ws.chat.twitch.tv` with PASS/NICK, CAP REQ tags/commands
5. On PRIVMSG: load channel config, check rank via Ranks worker, consult cooldown DO
6. If required: send `/timeout {user} {seconds} {reason}` as IRC PRIVMSG in-channel

### User Data Flow
1. Extension ‚Üí twitchauth-worker (exchanges code server-side, no tokens returned to client)
2. twitchauth-worker ‚Üí users-worker (registers/updates user profile via internal auth)
3. users-worker ‚Üí D1 Database

### Security Features
- All client-side code only communicates with auth workers
- Auth workers validate tokens before database operations (initial setup)
- Database workers only accept requests from auth workers (via service bindings)
- No direct client-to-database access
- Token validation prevents unauthorized data manipulation
- **ENHANCED**: Optimized single-call auth reduces backend calls from 2 to 1
- **ENHANCED**: Enhanced state parameter with base64url encoding for security
- **ENHANCED**: Backward compatibility with legacy state formats
- **ENHANCED**: Graceful fallback to dual-call flow if optimization fails
- **ENHANCED**: Server-side-only token handling reduces exposure surface
- **ENHANCED**: Simplified refresh flow eliminates client-side token management
- **ENHANCED**: Server-side API key usage reduces token exposure and refresh complexity
- **ENHANCED**: PUUID-only refresh requires existing database entry (prevents unauthorized access)

## Deprecations (Kept for Backward Compatibility)
- Riot Auth Worker: `GET /auth/init`, `POST /auth/token`, `GET /riot/account/{region}`, `GET /riot/league/entries`, `GET /riot/league/{platform}/{puuid}`, `POST /store-rank` ‚Äî not used by current clients.
- Twitch Auth Worker: `POST /auth/twitch/init`, `POST /auth/twitch/token`, `POST /auth/twitch/token/refresh`, `POST /auth/twitch/validate`, `POST /auth/twitch/user` ‚Äî superseded by `POST /twitch/auth`. Keep for older clients; safe to remove when no longer needed.
- Users Worker: name-based `POST /channel/active/update` remains for legacy; prefer ID-based `POST /channel/active/update_id` and `POST /dashboard/data_id`.
- Bot Worker: `GET /bot/config/{login}` removed; use `GET /bot/config_id/{twitch_id}`.

## Database Indexes

### users table
- PRIMARY KEY: `twitch_id`
- INDEX: `channel_name` (for username lookups)
- INDEX: `channel_active` (for active channel queries)
- INDEX: `email` (for email lookups)
- INDEX: `broadcaster_type` (for broadcaster type queries)

### subscriptions table
- PRIMARY KEY: `twitch_id`
- INDEX: `stripe_customer_id` (for Stripe lookups)
- INDEX: `stripe_subscription_id` (for Stripe lookups)
- INDEX: `plus_active` (for active subscription queries)
- INDEX: `subscription_end_date` (for expiration queries)

### lol_ranks table
- PRIMARY KEY: `riot_puuid`
- INDEX: `twitch_username` (for username lookups)
- INDEX: `riot_id` (for Riot ID lookups)
- NOTE: `region` column stores Riot API region identifiers (e.g., na1, euw1, kr)