# EloWard Cloudflare Infrastructure

## Status
The extension and site use only the active endpoints listed below.

## D1 Database Configuration
- Database Name: eloward
- Database ID: ef228f37-9c28-43f2-a211-cfddd4188c78

## Tables

### users
- Purpose: Stores complete Twitch user profile data and app-specific metrics
- Primary Key: `twitch_id` (TEXT)
- Columns:
  - `twitch_id` (TEXT): Twitch user ID (PRIMARY KEY)
  - `channel_name` (TEXT): Twitch login/username (stored in lowercase)
  - `display_name` (TEXT): Twitch display name (nullable)
  - `type` (TEXT): User type (e.g., "", "admin", "global_mod", "staff") (nullable)
  - `broadcaster_type` (TEXT): Broadcaster type (e.g., "", "affiliate", "partner") (nullable)
  - `description` (TEXT): User bio/description (nullable)
  - `profile_image_url` (TEXT): Profile image URL (nullable)
  - `offline_image_url` (TEXT): Offline banner image URL (nullable)
  - `view_count` (INTEGER): Total channel view count (default: 0)
  - `email` (TEXT): Twitch email (nullable)
  - `twitch_created_at` (TEXT): When Twitch account was created (ISO string) (nullable)
  - `db_reads` (INTEGER): Counter for all database reads requested for this channel (default: 0)
  - `successful_lookups` (INTEGER): Counter for successful lookups (viewer found in database) (default: 0)
  - `channel_active` (BOOLEAN): Whether EloWard is active for this channel (default: 1)
  - `created_at` (TIMESTAMP): When the user joined EloWard (default: CURRENT_TIMESTAMP)
  - `updated_at` (TIMESTAMP): When the record was last updated (default: CURRENT_TIMESTAMP)

### subscriptions
- Purpose: Stores payment and subscription metadata, separate from user profiles
- Primary Key: `twitch_id` (TEXT)
- Columns:
  - `twitch_id` (TEXT): Reference to users.twitch_id (PRIMARY KEY)
  - `stripe_customer_id` (TEXT): Stripe customer ID (unique, nullable)
  - `stripe_subscription_id` (TEXT): Stripe subscription ID (unique, nullable)
  - `subscription_end_date` (TIMESTAMP): When subscription expires (nullable)
  - `plus_active` (BOOLEAN): Whether EloWard+ features are active (default: 0)
  - `created_at` (TIMESTAMP): When the subscription was created (default: CURRENT_TIMESTAMP)
  - `updated_at` (TIMESTAMP): When the record was last updated (default: CURRENT_TIMESTAMP)
  - **Foreign Key**: `twitch_id` REFERENCES `users(twitch_id)` ON DELETE CASCADE

### lol_ranks
- Purpose: Stores League of Legends rank data for Twitch viewers
- Primary Key: `riot_puuid` (TEXT)
- Columns:
  - `riot_puuid` (TEXT): Riot player universal unique identifier (PRIMARY KEY)
  - `twitch_username` (TEXT): Twitch username (NOT NULL)
  - `riot_id` (TEXT): Riot ID (gameName#tagLine) (nullable)
  - `rank_tier` (TEXT): Rank tier (e.g., IRON, BRONZE, SILVER) (NOT NULL)
  - `rank_division` (TEXT): Rank division (e.g., I, II, III, IV) (nullable)
  - `lp` (INTEGER): League points (default: 0)
  - `region` (TEXT): Riot API region (e.g., na1, euw1, kr) (nullable)
  - `last_updated` (INTEGER): Unix timestamp of last update (NOT NULL)
  - `plus_active` (BOOLEAN): Premium subscription status for badge display (default: 0)

### stripe_events
- Purpose: Tracks processed Stripe webhook events for idempotency protection
- Primary Key: `id` (INTEGER AUTOINCREMENT)
- Columns:
  - `id` (INTEGER): Auto-incrementing primary key (PRIMARY KEY)
  - `stripe_event_id` (TEXT): Stripe's event ID for idempotency (UNIQUE NOT NULL)
  - `event_type` (TEXT): Event type (e.g., invoice.paid, subscription.updated) (NOT NULL)
  - `processed_at` (INTEGER): Timestamp when event was processed (NOT NULL)
  - `created_at` (INTEGER): When record was created (default: current timestamp)

## Worker Architecture

### Service Bindings Structure
```
Extension/Web App
    ↓
Auth Workers (Token Validation + API Calls)
    ↓
Database Workers (Database Operations)
    ↓
D1 Database
```

### Workers and Endpoints (active)

#### Authentication Workers (token validation and external API calls)

**Riot Auth Worker** (`riotauth-worker.ts`)
- URL: https://eloward-riotauth.unleashai.workers.dev
- Service Bindings: `RANK_WORKER`, `TWITCH_AUTH_WORKER`, `USERS_WORKER`, `STRIPE_WORKER`
- Endpoints:
  - `POST /auth/complete` — Status: Active. Completes OAuth and stores rank (server-side only).
  - `POST /riot/refreshrank` — Status: Active. Refreshes rank by PUUID (server-side only; no PUUID returned).
  - `DELETE /disconnect` — Status: Active. Deletes rank by PUUID (server-side only).
  - `GET /auth/redirect` — Status: Active. OAuth redirect handler.

**Twitch Auth Worker** (`twitchauth-worker.ts`)
- URL: https://eloward-twitchauth.unleashai.workers.dev
- Service Bindings: `USERS_WORKER`
- Endpoints:
  - `GET /health` — Status: Active.
  - `POST /twitch/auth` — Status: Active. Consolidated (code → user → register). No tokens returned to clients.
  - `GET /auth/twitch/redirect` — Status: Active. OAuth redirect handler.

#### Database Workers (Handle database operations only)

**Rank Worker** (`rank-worker.js`)
- URL: https://eloward-ranks.unleashai.workers.dev
- Database Access: Direct D1 binding
- Endpoints:
  - `GET /api/ranks/lol/{username}` — Status: Active (public read). Returns sanitized fields; no PUUID.
  - `POST /api/ranks/lol` — Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /api/ranks/lol/by-puuid` — Status: Active (read). Returns sanitized fields; no PUUID. Consider restricting to internal use.
  - `DELETE /api/ranks/lol` — Status: Active (internal delete). Requires `X-Internal-Auth`.

**Users Worker** (`users-worker.js`)
- URL: https://eloward-users.unleashai.workers.dev
- Database Access: Direct D1 binding
- Endpoints:
  - `GET /health` — Status: Active.
  - `POST /channelstatus/verify` — Status: Active (public read). Returns `{ active }` only.
  - `POST /metrics/db_read` — Status: Active (public write).
  - `POST /metrics/successful_lookup` — Status: Active (public write).
  - `POST /user/register` — Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /user/lookup` — Status: Active (internal read). Requires `X-Internal-Auth`.
  - `POST /user/riot-fallback` — Status: Active (public read). Returns consolidated riot and user data.
  - `POST /dashboard/data_id` — Status: Active (public read). ID-based; includes user email for authenticated user.
  - `POST /channel/active/update_id` — Status: Active (internal write). ID-based; requires `X-Internal-Auth`.

#### Utility Workers

**CDN Worker** (`cdn.js`)
- URL: https://eloward-cdn.unleashai.workers.dev
- Purpose: Serves rank badge images from R2 storage
- Endpoints:
  - `GET /{game}/{filename}` — Status: Active (public read). Static assets with long-lived caching.

**Stripe Worker** (`stripe-worker.js`)
- URL: https://eloward-stripe.unleashai.workers.dev
- Purpose: Handles Stripe payments, webhooks, and subscription management
- Database Access: Direct D1 binding
- Endpoints:
  - `POST /api/create-checkout-session` — Status: Active (public write). Creates checkout sessions with optional billing frequency toggle.
  - `POST /api/create-portal-session` — Status: Active (public write).
  - `POST /api/webhook` — Status: Active (webhook; raw body verification).
  - `POST /subscription/status` — Status: Active (public read). Returns subscription status for badge display.
  - `POST /subscription/upsert` — Status: Active (internal write). Requires `X-Internal-Auth`.
  - `GET /health?cleanup=true` — Status: Active (maintenance). Optional webhook event cleanup.

#### EloWard Bot Worker (`elowardbot/bot-worker.ts`)
- URL: https://eloward-bot.unleashai.workers.dev
- Purpose: Moderation bot control plane: OAuth, IRC ingestion, cooldowns (no EventSub/Helix in default mode)
- Durable Objects: `BotManager` (orchestrates), `IrcShard` (cooldown), `IrcClientShard` (IRC WebSocket)
- KV: `BOT_KV` for EloWardBot tokens
- Endpoints:
  - `GET /health` — Status: Active.
  - `POST /bot/config_id` — Status: Active (public read). Returns sanitized config; omits `twitch_id`.
  - `POST /bot/enable_internal` — Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /bot/disable_internal` — Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /bot/config_internal` — Status: Active (internal write). Requires `X-Internal-Auth`.
  - `POST /irc/start` / `POST /irc/reload` — Status: Active (internal). Starts/refreshes IRC client shards.
  - `GET /bot/config/{login}` — Status: Deprecated (removed). Use `/bot/config_id`.

## Data Flow

### Optimized Single-Call Riot Auth Flow (**ENHANCED** - 1 backend call)
1. Extension → Riot OAuth (with enhanced state containing twitch_id + region)
2. Riot → riotauth-worker `/auth/redirect` (with code + enhanced state)
3. riotauth-worker → Complete auth processing (server-side):
   - Exchanges code for tokens
   - Gets PUUID from Riot Account API  
   - Looks up channel_name from users-worker
   - Fetches rank data from Riot League API
   - Stores rank data via rank-worker
4. riotauth-worker → Website redirect (with auth_complete=true)
5. Website → Extension (via postMessage with success notification)

### Server-side Auth Flow (single call)
1. Extension → `/auth/redirect`
2. RiotAuth worker completes code exchange, fetches PUUID + rank, stores via Rank worker
3. Website notifies extension

### Rank Refresh Flow
1. Extension → `/riot/refreshrank` (PUUID-only)
2. RiotAuth → Rank worker lookup → Riot API → Rank worker update

### Simplified Rank Refresh Flow
1. Extension → riotauth-worker `/riot/refreshrank` (sends only PUUID)
2. riotauth-worker → rank-worker `/api/ranks/lol/by-puuid` (looks up user data)
3. riotauth-worker → Riot API (fetches current rank using server API key)
4. riotauth-worker → rank-worker `/api/ranks/lol` (updates rank data)
5. rank-worker → D1 Database

### EloWard Bot Moderation Flow (IRC-only)
1. Website dashboard → Bot worker OAuth (`/oauth/start?actor=bot`) to connect EloWardBot; tokens stored in KV
2. Streamer connects (`/oauth/start?actor=broadcaster`) → auto-enable bot
3. Dashboard internal toggle → `/irc/start` warms cooldowns and assigns channels to IRC client shards
4. IrcClientShard connects to `wss://irc-ws.chat.twitch.tv` with PASS/NICK, CAP REQ tags/commands
5. On PRIVMSG: load channel config, check rank via Ranks worker, consult cooldown DO
6. If required: send `/timeout {user} {seconds} {reason}` as IRC PRIVMSG in-channel

### User Data Flow
1. Extension → twitchauth-worker (exchanges code server-side, no tokens returned to client)
2. twitchauth-worker → users-worker (registers/updates user profile via internal auth)
3. users-worker → D1 Database

### Security Features
- All client-side code only communicates with auth workers
- Auth workers validate tokens before database operations (initial setup)
- Database workers only accept requests from auth workers (via service bindings)
- No direct client-to-database access
- Token validation prevents unauthorized data manipulation
- **ENHANCED**: Optimized single-call auth reduces backend calls from 2 to 1
- **ENHANCED**: Enhanced state parameter with base64url encoding for security
- **ENHANCED**: Backward compatibility with legacy state formats
- **ENHANCED**: Graceful fallback to dual-call flow if optimization fails
- **ENHANCED**: Server-side-only token handling reduces exposure surface
- **ENHANCED**: Simplified refresh flow eliminates client-side token management
- **ENHANCED**: Server-side API key usage reduces token exposure and refresh complexity
- **ENHANCED**: PUUID-only refresh requires existing database entry (prevents unauthorized access)

##

## Database Indexes

### users table
- PRIMARY KEY: `twitch_id`
- INDEX: `channel_name` (for username lookups)
- INDEX: `channel_active` (for active channel queries)
- INDEX: `email` (for email lookups)
- INDEX: `broadcaster_type` (for broadcaster type queries)

### subscriptions table
- PRIMARY KEY: `twitch_id`
- INDEX: `stripe_customer_id` (for Stripe lookups)
- INDEX: `stripe_subscription_id` (for Stripe lookups)
- INDEX: `plus_active` (for active subscription queries)
- INDEX: `subscription_end_date` (for expiration queries)

### lol_ranks table
- PRIMARY KEY: `riot_puuid`
- INDEX: `twitch_username` (for username lookups)
- INDEX: `riot_id` (for Riot ID lookups)
- NOTE: `region` column stores Riot API region identifiers (e.g., na1, euw1, kr)
- NOTE: `plus_active` column synced automatically from subscription changes

### stripe_events table
- PRIMARY KEY: `id`
- UNIQUE INDEX: `stripe_event_id` (for idempotency)
- INDEX: `processed_at` (for cleanup queries)
- INDEX: `event_type` (for event type filtering)