# EloWard Cloudflare Infrastructure

## Status
The extension and site use only the active endpoints listed below.

## D1 Database Configuration
- Database Name: eloward
- Database ID: ef228f37-9c28-43f2-a211-cfddd4188c78

## Tables

### users
- Purpose: Stores complete Twitch user profile data and app-specific metrics
- Primary Key: `twitch_id` (TEXT)
- Columns:
  - `twitch_id` (TEXT): Twitch user ID (PRIMARY KEY)
  - `channel_name` (TEXT): Twitch login/username (stored in lowercase)
  - `display_name` (TEXT): Twitch display name (nullable)
  - `type` (TEXT): User type (e.g., "", "admin", "global_mod", "staff") (nullable)
  - `broadcaster_type` (TEXT): Broadcaster type (e.g., "", "affiliate", "partner") (nullable)
  - `description` (TEXT): User bio/description (nullable)
  - `profile_image_url` (TEXT): Profile image URL (nullable)
  - `offline_image_url` (TEXT): Offline banner image URL (nullable)
  - `view_count` (INTEGER): Total channel view count (default: 0)
  - `email` (TEXT): Twitch email (nullable)
  - `twitch_created_at` (TEXT): When Twitch account was created (ISO string) (nullable)
  - `db_reads` (INTEGER): Counter for all database reads requested for this channel (default: 0)
  - `successful_lookups` (INTEGER): Counter for successful lookups (viewer found in database) (default: 0)
  - `channel_active` (BOOLEAN): Whether EloWard is active for this channel (default: 1)
  - `created_at` (TIMESTAMP): When the user joined EloWard (default: CURRENT_TIMESTAMP)
  - `updated_at` (TIMESTAMP): When the record was last updated (default: CURRENT_TIMESTAMP)

### subscriptions
- Purpose: Stores payment and subscription metadata, separate from user profiles
- Primary Key: `twitch_id` (TEXT)
- Columns:
  - `twitch_id` (TEXT): Reference to users.twitch_id (PRIMARY KEY)
  - `stripe_customer_id` (TEXT): Stripe customer ID (unique, nullable)
  - `stripe_subscription_id` (TEXT): Stripe subscription ID (unique, nullable)
  - `subscription_end_date` (TIMESTAMP): When subscription expires (nullable)
  - `plus_active` (BOOLEAN): Whether EloWard+ features are active (default: 0)
  - `created_at` (TIMESTAMP): When the subscription was created (default: CURRENT_TIMESTAMP)
  - `updated_at` (TIMESTAMP): When the record was last updated (default: CURRENT_TIMESTAMP)
  - **Foreign Key**: `twitch_id` REFERENCES `users(twitch_id)` ON DELETE CASCADE

### lol_ranks
- Purpose: Stores League of Legends rank data for Twitch viewers with peak rank tracking
- Primary Key: `riot_puuid` (TEXT)
- Columns:
  - `riot_puuid` (TEXT): Riot player universal unique identifier (PRIMARY KEY)
  - `twitch_username` (TEXT): Twitch username (NOT NULL)
  - `riot_id` (TEXT): Riot ID (gameName#tagLine) (nullable)
  - `rank_tier` (TEXT): Current rank tier (e.g., IRON, BRONZE, SILVER) (NOT NULL)
  - `rank_division` (TEXT): Current rank division (e.g., I, II, III, IV) (nullable)
  - `lp` (INTEGER): Current league points (default: 0)
  - `region` (TEXT): Riot API region (e.g., na1, euw1, kr) (nullable)
  - `last_updated` (INTEGER): Unix timestamp of last update (NOT NULL)
  - `plus_active` (BOOLEAN): Premium subscription status for badge display (default: 0)
  - `peak_rank_tier` (TEXT): Highest rank tier achieved (nullable)
  - `peak_rank_division` (TEXT): Highest rank division achieved (nullable)
  - `peak_lp` (INTEGER): Highest LP achieved (nullable)
  - `show_peak` (BOOLEAN): Whether to display peak rank instead of current rank (default: 0)
  - `animate_badge` (BOOLEAN): Whether to show animated badge effects (default: 0)

### twitch_bot_users
- Purpose: Stores EloWardBot per-channel configuration with minimal PII
- Primary Key: `twitch_id` (TEXT)
- Columns:
  - `twitch_id` (TEXT): Twitch user ID (PRIMARY KEY)
  - `channel_name` (TEXT): Channel login name (optional, display only)
  - `bot_enabled` (INTEGER): Whether bot is active for this channel (default: 0)
  - `timeout_seconds` (INTEGER): Timeout duration in seconds (default: 30)
  - `reason_template` (TEXT): Timeout message template (default includes placeholders)
  - `ignore_roles` (TEXT): Comma-separated roles to ignore (default: "broadcaster,moderator,vip")
  - `enforcement_mode` (TEXT): Enforcement strategy - 'has_rank' or 'min_rank' (default: 'has_rank')
  - `min_rank_tier` (TEXT): Minimum rank tier required (e.g., 'GOLD', 'DIAMOND') (nullable)
  - `min_rank_division` (INTEGER): Minimum rank division 1-4 for I-IV, null for Master+ (nullable)
  - `created_at` (TIMESTAMP): When record was created (default: CURRENT_TIMESTAMP)
  - `updated_at` (TIMESTAMP): When record was last updated (default: CURRENT_TIMESTAMP)

### stripe_events
- Purpose: Tracks processed Stripe webhook events for idempotency protection
- Primary Key: `id` (INTEGER AUTOINCREMENT)
- Columns:
  - `id` (INTEGER): Auto-incrementing primary key (PRIMARY KEY)
  - `stripe_event_id` (TEXT): Stripe's event ID for idempotency (UNIQUE NOT NULL)
  - `event_type` (TEXT): Event type (e.g., invoice.paid, subscription.updated) (NOT NULL)
  - `processed_at` (INTEGER): Timestamp when event was processed (NOT NULL)
  - `created_at` (INTEGER): When record was created (default: current timestamp)

## Worker Architecture

### Service Bindings Structure
```
Extension/Web App
    ↓
Auth Workers (Token Validation + API Calls)
    ↓
Database Workers (Database Operations)
    ↓
D1 Database
```

### Workers and Endpoints (active)

#### Authentication Workers (token validation and external API calls)

**Riot Auth Worker** (`riotauth-worker.ts`)
- URL: https://eloward-riotauth.unleashai.workers.dev
- Service Bindings: `RANK_WORKER`, `TWITCH_AUTH_WORKER`, `USERS_WORKER`, `STRIPE_WORKER`
- Endpoints:
  - `POST /auth/complete` — Complete OAuth and store rank data
  - `POST /riot/refreshrank` — Refresh rank by PUUID
  - `DELETE /disconnect` — Delete rank data by PUUID
  - `GET /auth/redirect` — OAuth redirect handler

**Twitch Auth Worker** (`twitchauth-worker.ts`)
- URL: https://eloward-twitchauth.unleashai.workers.dev
- Service Bindings: `USERS_WORKER`
- Endpoints:
  - `GET /health` — Health check
  - `POST /twitch/auth` — Process Twitch OAuth and register user
  - `GET /auth/twitch/redirect` — OAuth redirect handler

#### Database Workers (Handle database operations only)

**Rank Worker** (`rank-worker.js`)
- URL: https://eloward-ranks.unleashai.workers.dev
- Database: Direct D1 binding
- Endpoints:
  - `GET /api/ranks/lol/{username}` — Get rank data by username
  - `POST /api/ranks/lol` — Store/update rank (internal auth required)
  - `POST /api/ranks/lol/by-puuid` — Get rank data by PUUID
  - `DELETE /api/ranks/lol` — Delete rank data (internal auth required)
  - `GET /api/options/{puuid}` — Get user display options
  - `PUT /api/options` — Update display options (Plus required)

**Users Worker** (`users-worker.js`)
- URL: https://eloward-users.unleashai.workers.dev
- Database: Direct D1 binding
- Endpoints:
  - `GET /health` — Health check
  - `POST /channelstatus/verify` — Check if channel is active
  - `POST /metrics/db_read` — Increment read counter
  - `POST /metrics/successful_lookup` — Increment lookup counter
  - `POST /user/register` — Register/update user (internal auth required)
  - `POST /user/lookup` — Get user by Twitch ID (internal auth required)
  - `POST /user/riot-fallback` — Get consolidated user + rank data
  - `POST /dashboard/data_id` — Get dashboard data by Twitch ID
  - `POST /channel/active/update_id` — Update channel status (internal auth required)

#### Utility Workers

**CDN Worker** (`cdn.js`)
- URL: https://eloward-cdn.unleashai.workers.dev
- Storage: R2 binding
- Endpoints:
  - `GET /{game}/{filename}` — Serve badge images

**Stripe Worker** (`stripe-worker.js`)
- URL: https://eloward-stripe.unleashai.workers.dev
- Database: Direct D1 binding
- Endpoints:
  - `POST /api/create-checkout-session` — Create Stripe checkout
  - `POST /api/create-portal-session` — Create customer portal
  - `POST /api/webhook` — Process Stripe webhooks
  - `POST /subscription/status` — Get subscription status
  - `POST /subscription/upsert` — Update subscription (internal auth required)
  - `GET /health` — Health check with optional cleanup

#### EloWard Bot Worker (`elowardbot/bot-worker.ts`)
- URL: https://eloward-bot.unleashai.workers.dev
- Architecture: Hybrid (CF Workers + AWS Lightsail IRC bot)
- Storage: KV for bot tokens, D1 for channel config
- Messaging: SQS + Redis for IRC bot sync
- Endpoints:
  - `GET /health` — Health check with channel count
  - `POST /bot/config_id` — Get bot config by Twitch ID
  - `POST /dashboard/init` — Dashboard initialization data
  - `POST /bot/enable_internal` — Enable bot (internal auth required)
  - `POST /bot/disable_internal` — Disable bot (internal auth required)
  - `POST /bot/config_internal` — Update bot config (internal auth required)
  - `GET /token` — Get bot token for IRC client
  - `POST /token/refresh` — Force token refresh
  - `GET /channels` — List enabled channels for IRC bot
  - `POST /check-message` — Process chat message
  - `POST /irc/channel/add` — Enable channel
  - `POST /irc/channel/remove` — Disable channel
  - `GET /oauth/start` — Start OAuth flow
  - `GET /oauth/callback` — Complete OAuth

## Architecture Notes

- **Hybrid Bot**: Cloudflare Workers (control plane) + AWS Lightsail IRC bot
- **Service Bindings**: Auth workers call database workers internally with `X-Internal-Auth`
- **Peak Ranks**: Automatic tracking + OpGG seeding
- **Token Management**: Server-side only, no client token exposure

## Security
- Service bindings prevent direct client-to-database access
- Internal auth headers (`X-Internal-Auth`) required for write operations
- Server-side token handling only
- PUUID-based operations require existing database entries

##

## Database Indexes

### users table
- PRIMARY KEY: `twitch_id`
- INDEX: `channel_name` (for username lookups)
- INDEX: `channel_active` (for active channel queries)
- INDEX: `email` (for email lookups)
- INDEX: `broadcaster_type` (for broadcaster type queries)

### subscriptions table
- PRIMARY KEY: `twitch_id`
- INDEX: `stripe_customer_id` (for Stripe lookups)
- INDEX: `stripe_subscription_id` (for Stripe lookups)
- INDEX: `plus_active` (for active subscription queries)
- INDEX: `subscription_end_date` (for expiration queries)

### lol_ranks table
- PRIMARY KEY: `riot_puuid`
- INDEX: `twitch_username` (for username lookups)
- INDEX: `riot_id` (for Riot ID lookups)
- NOTE: `region` column stores Riot API region identifiers (e.g., na1, euw1, kr)
- NOTE: `plus_active` column synced automatically from subscription changes
- NOTE: Peak rank fields (`peak_rank_tier`, `peak_rank_division`, `peak_lp`) track historical highs
- NOTE: Display options (`show_peak`, `animate_badge`) require Plus subscription

### twitch_bot_users table
- PRIMARY KEY: `twitch_id`
- UNIQUE INDEX: `channel_name` (for channel lookups)
- NOTE: Stores per-channel bot configuration and enforcement settings

### stripe_events table
- PRIMARY KEY: `id`
- UNIQUE INDEX: `stripe_event_id` (for idempotency)
- INDEX: `processed_at` (for cleanup queries)
- INDEX: `event_type` (for event type filtering)